#!/bin/bash

# Q&D script to tweet voter info to a random sequence of all the states, separated
# by random intervals, but no less than 10 minutes.  The cycle fits into ~24hrs.
# Meant to run in the background over the course of a day.

# Suppress some actions when debugging (-x)
exec=
[[ "$-" =~ .*x.* ]] && exec=:

usage() {
	echo "Usage:
$0 -h
$0 [-q number-of-tweets] [-w time-period(max 86400 sec)] [-b base-interval(default 600)] [-k keys_file] { [-S tweep_file] | [-s state] } campaign"
}
exclu_msg="-s and -S are mutually exclusive."

set_boundaries() {
	# Set fail-safe bounds on input params that determine tweet period and intervals.
	# Calibration: minimum 10 min. interval.  Set of len(step_seq) intervals adds to "Elapsed:"
	# hours, so all states will be tweeted within "waking hours" (approx. 16 hrs., e.g. 6AM-10PM).
	# This algorithm applies for states as well as cities within a state.
	[ "$Quanta" -le ${#step_seq[@]} ] 2> /dev/null || Quanta=${#step_seq[@]}
	[ "$Waking_hrs" -ge 0 -a "$Waking_hrs" -le 86400 ] 2> /dev/null || Waking_hrs=$((16 * 60 * 60))  # sec.
}

build_voterinfo_seq() {
	local step_gen

	# Be careful to quote multi-word names into the array
	if [ -z "$State" ]; then
		step_gen="
import campaign
import render
render.all_states(campaign.campaigns['"$Campaign"'])
"
	else
		step_gen="
import campaign
import render
render.all_cities(campaign.campaigns['"$Campaign"'], '"$State"')
"
	fi
	eval step_seq=( `python -c "$step_gen" | shuf` )
}

build_tweep_seq() {
	step_seq=( `awk 'BEGIN { FS="|" } { print $2 }' $Tweep_file` )
}

build_interval_seq() {
	# Generate a shuffled list of wait intervals spread over a time period.
	# We have one Base_wait interval, then ($Quanta - 2) wait intervals occurring between steps.
	local delta time_period adj_quanta interval_sum

	time_period=$1
	adj_quanta=$(( $Quanta - 2 ))
	delta=`exec 2> /dev/null; echo $(( ($time_period - ($adj_quanta * $Base_wait)) / (($adj_quanta**2 + $adj_quanta) / 2) ))`
	[ "$delta" -ge 0 ] 2> /dev/null || delta=0
	echo "quanta: $Quanta, delta: $delta"

	interval_seq=( `count=1; time=$Base_wait;
			while [ $count -lt $Quanta ]; do
				echo $time; time=$(($time + $delta)); count=$(($count + 1));
			done | shuf` )
	interval_seq=( ${interval_seq[@]} 0 )	# Terminate interval list
	interval_sum=$(( (`echo ${interval_seq[*]} | sed 's/ /+/g'`) ))
	echo "Elapsed:" $(( $interval_sum )) "sec.," $(( $interval_sum / 60)) "min."
}

print_tweet_schedule() {
	local i

	i=0
	echo -n "Steps/intervals: "
	while [ -n "${step_seq[$i]}" -a -n "${interval_seq[$i]}" ]; do
		if [ -z "$State" ]; then
			echo -n "${step_seq[$i]}/${interval_seq[$i]}"
		else
			echo -n "$(($i + 1))/${interval_seq[$i]}"
		fi
		echo -n " "
		i=$(($i + 1))
	done
}

tweet_loop() {
	# Enter a tweet loop, calling the action function at each interval
	local i action

	action=$1
	i=0
	while [ -n "${step_seq[$i]}" -a -n "${interval_seq[$i]}" ]; do
		echo
		if [ -z "$State" ]; then
			echo "Step $(($i + 1)): ${step_seq[$i]}, interval ${interval_seq[$i]}"
		else
			echo "Step $(($i + 1)), interval ${interval_seq[$i]}"
		fi

		eval $action $i
		$exec sleep ${interval_seq[$i]}
		i=$(($i + 1))
	done
}

voterinfo_tweet() {
	local place

	# For cities in a state, always tweet the same state
	[ -z "$State" ] && place="${step_seq[$1]}" || place="$State"
	$exec python voterinfo.py $Campaign "$place"
}

socialize_tweet() {
	$exec python socialize.py $Campaign "${step_seq[$1]}"
}

#
# ------------ Main logic ------------
#

Action_fn=voterinfo_tweet
Build_step_seq=build_voterinfo_seq
Base_wait=600
while getopts hs:q:w:S:b:k: option; do
	case $option in
	h) usage
		exit 0
		;;
	s)
		[ -n "$Tweep_file" ] && { echo "$exclu_msg"; usage; exit 1; }
		State="$OPTARG"
		;;
	q) Quanta="$OPTARG"
		;;
	w) Waking_hrs="$OPTARG"
		;;
	S)
		[ -n "$State" ] && { echo "$exclu_msg"; usage; exit 1; }
		Tweep_file="$OPTARG"
		Action_fn=socialize_tweet
		Build_step_seq=build_tweep_seq
		;;
	b) Base_wait="$OPTARG"
		;;
	k)
		[ -e keys.xml -a ! -L keys.xml ] && { echo "keys.xml is not a symlink; exiting."; exit 1; }
		Key_file="$OPTARG"
		;;
	?) usage
		exit 1
	esac
done

args=("$@")
OPTIND=$(($OPTIND - 1))
Campaign="${args[$OPTIND]}"
[ -n "$Campaign" ] || { usage; exit 1; }
[ -n "$Key_file" ] && { rm -f keys.xml; ln -s "$OPTARG" keys.xml; }

eval $Build_step_seq

set_boundaries

build_interval_seq $Waking_hrs

print_tweet_schedule

# Enter tweeting loop.
# NOTE: For this algorithm, a "step" will contain a city name if the script was invoked with -s,
# or a Twitter username if invoked with -S.
tweet_loop $Action_fn

exit $?

# ----- Test Cases -----
# - Manual; network action suppressed.
# - Validations:
#	- Check interval (delay) list correctly computed.
#	- Check "cities" items correctly selected.
#	- Check resulting python commands correct as to form.
# - Uncomment the below sub-shell block & execute.
#(
#run_case() {
#	(set -x; bash -x tweet_vi "$@") 2>&1 | less
#}
#run_case 2022_xnafnf_pubvpr
#run_case -s Kansas 2022_xnafnf_pubvpr
#run_case -s Kansas -q 2 2022_xnafnf_pubvpr
#run_case 2020_cerfvqragvny
#run_case -q 14 -w 28800 2020_cerfvqragvny
#run_case -s Ohio -S foo 2022_xnafnf_pubvpr
#run_case -S foo -s Ohio 2022_xnafnf_pubvpr
#run_case -S tests/net_followers.out 2022_ggp_enzc_hc
#run_case -S tests/net_followers.out -q 3 -w $(( 8 * 3600 )) 2022_ggp_enzc_hc
#run_case -S tests/net_followers.out -q 6 -w $(( 8 * 3600 )) 2022_ggp_enzc_hc
#run_case -S tests/net_followers.out -q 4 -w $(( 8 * 3600 )) 2022_ggp_enzc_hc
#)
